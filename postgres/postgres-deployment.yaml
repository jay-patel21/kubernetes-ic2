apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment ## name of the deployment.
  namespace: pg-ns ## name of the namespace
  labels:
    app: postgres 
spec:
  replicas: 1 # number of replicas
  selector:
    matchLabels:
      app: postgres ## using this service will identify the pods related to this deployment 
  template: ## all pods will be created base on this template (means all pods will have same config)
    metadata:
      labels:
        app: postgres
        env: dev # environment 
        version: "1.0.0"
    spec:
      containers:
      - name: postgres
        image: postgres:13
        envFrom:
          - configMapRef: 
              name: postgres-configmap ## reference of the configmap
              optional: false
          - secretRef:
              name: postgres-secret ## reference of the secrets
              optional: false
        ports: ## pods will be running on this port
        - containerPort: 5432 

---

apiVersion: v1
kind: Service
metadata:
  name: postgres-service # name of the service ( by using this name we can call it from different service )
  namespace: pg-ns # name of the namespace
spec:
  selector:
    app: postgres # name of the container (from the deployment)
  ports:
    - protocol: TCP
      port: 5432 # on this port our service will run 
      targetPort: 5432  # Container port
  type: ClusterIP # type of the service (1. Loadbalancer, 2. NodePort, 3. ClusterIP) 


---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-configmap # name of the config-map
  namespace: pg-ns
data:
  POSTGRES_USER: imv27
  POSTGRES_DB: mydb

---

apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: pg-ns
type: Opaque
data:
  POSTGRES_PASSWORD: VmlzaHVAMjAwMQ==  # Base64 encoded 'Vishu@2001'